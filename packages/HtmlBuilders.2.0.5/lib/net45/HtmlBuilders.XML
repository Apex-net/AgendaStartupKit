<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HtmlBuilders</name>
    </assembly>
    <members>
        <member name="T:HtmlBuilders.ExtensionsForHtmlTag">
            <summary>
            
            </summary>
        </member>
        <member name="M:HtmlBuilders.ExtensionsForHtmlTag.Name(HtmlBuilders.HtmlTag,System.String,System.Boolean)">
            <summary>
              Sets the name property. This is a shorthand for the <see cref="M:HtmlBuilders.HtmlTag.Attribute(System.String,System.String,System.Boolean)"/> method with 'name' as the
              attribute parameter value.
            </summary>
            <param name="htmlTag">This <see cref="T:HtmlBuilders.HtmlTag"/></param>
            <param name="name">The value for the 'name' attribute</param>
            <param name="replaceExisting">
              A value indicating whether the existing attribute, if any, should have its value replaced
              by the <paramref name="name"/> provided.
            </param>
            <returns>This <see cref="T:HtmlBuilders.HtmlTag"/></returns>
        </member>
        <member name="M:HtmlBuilders.ExtensionsForHtmlTag.Title(HtmlBuilders.HtmlTag,System.String,System.Boolean)">
            <summary>
              Sets the title property. This is a shorthand for the <see cref="M:HtmlBuilders.HtmlTag.Attribute(System.String,System.String,System.Boolean)"/> method with 'title' as the
              attribute parameter value.
            </summary>
            <param name="htmlTag">This <see cref="T:HtmlBuilders.HtmlTag"/></param>
            <param name="title">The value for the 'title' attribute</param>
            <param name="replaceExisting">
              A value indicating whether the existing attribute, if any, should have its value replaced
              by the <paramref name="title"/> provided.
            </param>
            <returns>This <see cref="T:HtmlBuilders.HtmlTag"/></returns>
        </member>
        <member name="M:HtmlBuilders.ExtensionsForHtmlTag.Id(HtmlBuilders.HtmlTag,System.String,System.Boolean)">
            <summary>
              Sets the id property. This is a shorthand for the <see cref="M:HtmlBuilders.HtmlTag.Attribute(System.String,System.String,System.Boolean)"/> method with 'id' as the attribute
              parameter value.
            </summary>
            <param name="htmlTag">This <see cref="T:HtmlBuilders.HtmlTag"/></param>
            <param name="id">The value for the 'id' attribute</param>
            <param name="replaceExisting">
              A value indicating whether the existing attribute, if any, should have its value replaced
              by the <paramref name="id"/> provided.
            </param>
            <returns>This <see cref="T:HtmlBuilders.HtmlTag"/></returns>
        </member>
        <member name="M:HtmlBuilders.ExtensionsForHtmlTag.Type(HtmlBuilders.HtmlTag,System.String,System.Boolean)">
            <summary>
              Sets the type property. This is a shorthand for the <see cref="M:HtmlBuilders.HtmlTag.Attribute(System.String,System.String,System.Boolean)"/> method with 'type' as the
              attribute parameter value.
            </summary>
            <param name="htmlTag">This <see cref="T:HtmlBuilders.HtmlTag"/></param>
            <param name="type">The value for the 'type' attribute</param>
            <param name="replaceExisting">
              A value indicating whether the existing attribute, if any, should have its value replaced
              by the <paramref name="type"/> provided.
            </param>
            <returns>This <see cref="T:HtmlBuilders.HtmlTag"/></returns>
        </member>
        <member name="M:HtmlBuilders.ExtensionsForHtmlTag.Value(HtmlBuilders.HtmlTag,System.String,System.Boolean)">
            <summary>
              Sets the value property. This is a shorthand for the <see cref="M:HtmlBuilders.HtmlTag.Attribute(System.String,System.String,System.Boolean)"/> method with 'value' as the
              attribute parameter value.
            </summary>
            <param name="htmlTag">This <see cref="T:HtmlBuilders.HtmlTag"/></param>
            <param name="value">The value for the 'value' attribute</param>
            <param name="replaceExisting">
              A value indicating whether the existing attribute, if any, should have its value replaced
              by the <paramref name="value"/> provided.
            </param>
            <returns>This <see cref="T:HtmlBuilders.HtmlTag"/></returns>
        </member>
        <member name="M:HtmlBuilders.ExtensionsForHtmlTag.Href(HtmlBuilders.HtmlTag,System.String,System.Boolean)">
            <summary>
              Sets the href property. This is a shorthand for the <see cref="M:HtmlBuilders.HtmlTag.Attribute(System.String,System.String,System.Boolean)"/> method with 'href' as the
              attribute parameter value.
            </summary>
            <param name="htmlTag">This <see cref="T:HtmlBuilders.HtmlTag"/></param>
            <param name="href">The value for the 'href' attribute</param>
            <param name="replaceExisting">
              A value indicating whether the existing attribute, if any, should have its value replaced
              by the <paramref name="href"/> provided.
            </param>
            <returns>This <see cref="T:HtmlBuilders.HtmlTag"/></returns>
        </member>
        <member name="M:HtmlBuilders.ExtensionsForHtmlTag.Text(HtmlBuilders.HtmlTag)">
            <summary>
              Gets the HTML stripped content of this <see cref="T:HtmlBuilders.HtmlTag"/>
            </summary>
            <param name="htmlTag">This <see cref="T:HtmlBuilders.HtmlTag"/></param>
            <returns>The HTML stripped contents.</returns>
        </member>
        <member name="M:HtmlBuilders.ExtensionsForHtmlTag.Checked(HtmlBuilders.HtmlTag,System.Boolean)">
            <summary>
              Sets the 'checked' attribute to 'checked' if <paramref name="checked"/> is true or removes the attribute if
              <paramref name="checked"/> is false
            </summary>
            <param name="htmlTag">This <see cref="T:HtmlBuilders.HtmlTag"/></param>
            <param name="checked">
              A value indicating whether this tag should have the attribute 'checked' with value 'checked' or
              not.
            </param>
            <returns>This <see cref="T:HtmlBuilders.HtmlTag"/></returns>
        </member>
        <member name="M:HtmlBuilders.ExtensionsForHtmlTag.Disabled(HtmlBuilders.HtmlTag,System.Boolean)">
            <summary>
              Sets the 'disabled' attribute to 'disabled' if <paramref name="disabled"/> is true or removes the attribute if
              <paramref name="disabled"/> is false
            </summary>
            <param name="htmlTag">This <see cref="T:HtmlBuilders.HtmlTag"/></param>
            <param name="disabled">
              A value indicating whether this tag should have the attribute 'disabled' with value 'disabled'
              or not.
            </param>
            <returns>This <see cref="T:HtmlBuilders.HtmlTag"/></returns>
        </member>
        <member name="M:HtmlBuilders.ExtensionsForHtmlTag.Selected(HtmlBuilders.HtmlTag,System.Boolean)">
            <summary>
              Sets the 'selected' attribute to 'selected' if <paramref name="selected"/> is true or removes the attribute if
              <paramref name="selected"/> is false
            </summary>
            <param name="htmlTag">This <see cref="T:HtmlBuilders.HtmlTag"/></param>
            <param name="selected">
              A value indicating whether this tag should have the attribute 'selected' with value 'selected'
              or not.
            </param>
            <returns>This <see cref="T:HtmlBuilders.HtmlTag"/></returns>
        </member>
        <member name="M:HtmlBuilders.ExtensionsForHtmlTag.Readonly(HtmlBuilders.HtmlTag,System.Boolean)">
            <summary>
              Sets the 'readonly' attribute to 'readonly' if <paramref name="readonly"/> is true or removes the attribute if
              <paramref name="readonly"/> is false
            </summary>
            <param name="htmlTag">This <see cref="T:HtmlBuilders.HtmlTag"/></param>
            <param name="readonly">
              A value indicating whether this tag should have the attribute 'readonly' with value 'readonly'
              or not.
            </param>
            <returns>This <see cref="T:HtmlBuilders.HtmlTag"/></returns>
        </member>
        <member name="T:HtmlBuilders.IHtmlElement">
            <summary>
              Represents an html element
            </summary>
        </member>
        <member name="M:HtmlBuilders.IHtmlElement.ToHtml(System.Nullable{System.Web.Mvc.TagRenderMode})">
            <summary>
              Renders this <see cref="T:HtmlBuilders.IHtmlElement"/> to an <see cref="T:System.Web.IHtmlString"/>
            </summary>
            <param name="tagRenderMode">The mode with which to render this node</param>
            <returns>
              An <see cref="T:System.Web.IHtmlString"/> representation of this <see cref="T:HtmlBuilders.IHtmlElement"/> using the specified
              <paramref name="tagRenderMode"/>
            </returns>
        </member>
        <member name="P:HtmlBuilders.IHtmlElement.Parent">
            <summary>
              Gets the parent of this element
            </summary>
        </member>
        <member name="T:HtmlBuilders.HtmlTag">
            <summary>
              Represents an html tag that can have a parent, children, attributes, etc.
            </summary>
        </member>
        <member name="F:HtmlBuilders.HtmlTag._tagBuilder">
            <summary>
              The inner <see cref="T:System.Web.Mvc.TagBuilder"/>
            </summary>
        </member>
        <member name="F:HtmlBuilders.HtmlTag._contents">
            <summary>
              The inner list of contents
            </summary>
        </member>
        <member name="F:HtmlBuilders.HtmlTag._tagRenderMode">
            <summary>
              The inner <see cref="T:System.Web.Mvc.TagRenderMode"/>
            </summary>
        </member>
        <member name="M:HtmlBuilders.HtmlTag.#ctor(System.String)">
            <summary>
              Initializes a new instance of <see cref="T:HtmlBuilders.HtmlTag"/>
            </summary>
            <param name="tagName">The tag name</param>
        </member>
        <member name="M:HtmlBuilders.HtmlTag.ToggleAttribute(System.String,System.Boolean)">
            <summary>
              Triggers an attribute on this tag. Common examples include "checked", "selected", "disabled", ...
            </summary>
            <param name="attribute">The name of the attribute</param>
            <param name="value">A value indicating whether this attribute should be set on this tag or not.</param>
            <returns>This <see cref="T:HtmlBuilders.HtmlTag"/></returns>
        </member>
        <member name="M:HtmlBuilders.HtmlTag.Find(System.Func{HtmlBuilders.HtmlTag,System.Boolean})">
            <summary>
              Finds the children or the children of those children, etc. that match the <paramref name="filter" />
            </summary>
            <param name="filter">The filter that specifies the conditions that each subnode must satisfy</param>
            <returns>The sub elements that satisfied the filter</returns>
        </member>
        <member name="M:HtmlBuilders.HtmlTag.Prepend(HtmlBuilders.IHtmlElement[])">
            <summary>
              Prepends an <see cref="T:HtmlBuilders.IHtmlElement"/> to the <see cref="P:HtmlBuilders.HtmlTag.Contents"/>
            </summary>
            <param name="elements">
              The elements that will be inserted at the beginning of the contents of this tag, before all
              other content elements
            </param>
            <returns>this <see cref="T:HtmlBuilders.HtmlTag"/></returns>
        </member>
        <member name="M:HtmlBuilders.HtmlTag.Prepend(System.Collections.Generic.IEnumerable{HtmlBuilders.IHtmlElement})">
            <summary>
              Prepends an <see cref="T:HtmlBuilders.IHtmlElement"/> to the <see cref="P:HtmlBuilders.HtmlTag.Contents"/>
            </summary>
            <param name="elements">
              The elements that will be inserted at the beginning of the contents of this tag, before all
              other content elements
            </param>
            <returns>this <see cref="T:HtmlBuilders.HtmlTag"/></returns>
        </member>
        <member name="M:HtmlBuilders.HtmlTag.Prepend(System.String)">
            <summary>
              Prepends an <see cref="T:HtmlBuilders.HtmlText"/> to the <see cref="P:HtmlBuilders.HtmlTag.Contents"/>
            </summary>
            <param name="text">
              The text that will be inserted as a <see cref="T:HtmlBuilders.HtmlText"/> at the beginning of the contents of this
              tag, before all other content elements
            </param>
            <returns>this <see cref="T:HtmlBuilders.HtmlTag"/></returns>
        </member>
        <member name="M:HtmlBuilders.HtmlTag.Insert(System.Int32,HtmlBuilders.IHtmlElement[])">
            <summary>
              Inserts an <see cref="T:HtmlBuilders.IHtmlElement"/> to the <see cref="P:HtmlBuilders.HtmlTag.Contents"/> at the given <paramref name="index"/>
            </summary>
            <param name="index">The index at which the <paramref name="elements"/> should be inserted</param>
            <param name="elements">
              The elements that will be inserted at the specifix <paramref name="index"/> of the contents of
              this tag
            </param>
            <returns>this <see cref="T:HtmlBuilders.HtmlTag"/></returns>
        </member>
        <member name="M:HtmlBuilders.HtmlTag.Insert(System.Int32,System.Collections.Generic.IEnumerable{HtmlBuilders.IHtmlElement})">
            <summary>
              Inserts an <see cref="T:HtmlBuilders.IHtmlElement"/> to the <see cref="P:HtmlBuilders.HtmlTag.Contents"/> at the given <paramref name="index"/>
            </summary>
            <param name="index">The index at which the <paramref name="elements"/> should be inserted</param>
            <param name="elements">
              The elements that will be inserted at the specifix <paramref name="index"/> of the contents of
              this tag
            </param>
            <returns>this <see cref="T:HtmlBuilders.HtmlTag"/></returns>
        </member>
        <member name="M:HtmlBuilders.HtmlTag.Insert(System.Int32,System.String)">
            <summary>
              Inserts an <see cref="T:HtmlBuilders.IHtmlElement"/> to the <see cref="P:HtmlBuilders.HtmlTag.Contents"/> at the given <paramref name="index"/>
            </summary>
            <param name="index">The index at which the <paramref name="text"/> should be inserted</param>
            <param name="text">
              The text that will be inserted as a <see cref="T:HtmlBuilders.HtmlText"/> at the specifix
              <paramref name="index"/> of the contents of this tag
            </param>
            <returns>this <see cref="T:HtmlBuilders.HtmlTag"/></returns>
        </member>
        <member name="M:HtmlBuilders.HtmlTag.Append(HtmlBuilders.IHtmlElement[])">
            <summary>
              Appends an <see cref="T:HtmlBuilders.IHtmlElement"/> to the <see cref="P:HtmlBuilders.HtmlTag.Contents"/>
            </summary>
            <param name="elements">
              The elements that will be inserted at the end of the contents of this tag, after all other
              content elements
            </param>
            <returns>this <see cref="T:HtmlBuilders.HtmlTag"/></returns>
        </member>
        <member name="M:HtmlBuilders.HtmlTag.Append(System.Collections.Generic.IEnumerable{HtmlBuilders.IHtmlElement})">
            <summary>
              Appends an <see cref="T:HtmlBuilders.IHtmlElement"/> to the <see cref="P:HtmlBuilders.HtmlTag.Contents"/>
            </summary>
            <param name="elements">
              The elements that will be inserted at the end of the contents of this tag, after all other
              content elements
            </param>
            <returns>this <see cref="T:HtmlBuilders.HtmlTag"/></returns>
        </member>
        <member name="M:HtmlBuilders.HtmlTag.Append(System.String)">
            <summary>
              Appends an <see cref="T:HtmlBuilders.IHtmlElement"/> to the <see cref="P:HtmlBuilders.HtmlTag.Contents"/>
            </summary>
            <param name="text">
              The text that will be inserted as a <see cref="T:HtmlBuilders.HtmlText"/> at the end of the contents of this tag,
              after all other content elements
            </param>
            <returns>this <see cref="T:HtmlBuilders.HtmlTag"/></returns>
        </member>
        <member name="M:HtmlBuilders.HtmlTag.HasAttribute(System.String)">
            <summary>
              Alias method for <see cref="M:HtmlBuilders.HtmlTag.ContainsKey(System.String)"/>
            </summary>
            <param name="attribute">The attribute</param>
            <returns>True if the attribute was present in the attributes dictionary or false otherwise</returns>
        </member>
        <member name="M:HtmlBuilders.HtmlTag.Attribute(System.String,System.String,System.Boolean)">
            <summary>
              Sets an attribute on this tag
            </summary>
            <param name="attribute">The attribute to set</param>
            <param name="value">The value to set</param>
            <param name="replaceExisting">
              A value indicating whether the <paramref name="value"/> should override the existing value for the
              <paramref name="attribute"/>, if any.
            </param>
            <returns>This <see cref="T:HtmlBuilders.HtmlTag"/></returns>
        </member>
        <member name="M:HtmlBuilders.HtmlTag.Data(System.String,System.String,System.Boolean)">
            <summary>
              Sets a data attribute. This method will automatically prepend 'data-' to the attribute name if the attribute name
              does not start with 'data-'.
            </summary>
            <param name="attribute">The name of the attribute</param>
            <param name="value">The value</param>
            <param name="replaceExisting">
              A value indicating whether the existing data attribute, if any, should have its value
              replace by the <paramref name="value"/> provided.
            </param>
            <returns>This <see cref="T:HtmlBuilders.HtmlTag"/></returns>
        </member>
        <member name="M:HtmlBuilders.HtmlTag.Data(System.Object,System.Boolean)">
            <summary>
              Sets a data attribute. This method will automatically prepend 'data-' to the attribute name if the attribute name
              does not start with 'data-'.
            </summary>
            <param name="data">The anonymous data object containing properties that should be set as data attributes</param>
            <param name="replaceExisting">
              A value indicating whether the existing data attributes, if any, should have their values
              replaced by the values found in <paramref name="data"/>
            </param>
            <example>
              <code>
                // results in &lt;a data-index-url="/index" data-about-url="/about"&gt;&lt;a&gt;
                new HtmlTag('a').Data(new { index_url = "/index", about_url = "/about"}).ToHtml() 
            </code>
            </example>
            <returns>This <see cref="T:HtmlBuilders.HtmlTag"/></returns>
        </member>
        <member name="M:HtmlBuilders.HtmlTag.Style(System.String,System.String,System.Boolean)">
            <summary>
              Sets a css style <paramref name="key" /> and <paramref name="value" /> on the 'style' attribute.
            </summary>
            <param name="key">The type of the style (width, height, margin, padding, ...)</param>
            <param name="value">The value of the style (any valid css value for the given <paramref name="key" />)</param>
            <param name="replaceExisting">
              A value indicating whether the existing value for the given <paramref name="key" />
              should be updated or not, if such a key is already present in the 'style' attribute.
            </param>
            <returns></returns>
        </member>
        <member name="M:HtmlBuilders.HtmlTag.RemoveStyle(System.String)">
            <summary>
              Removes a <paramref name="key"/> from the <see cref="P:HtmlBuilders.HtmlTag.Styles"/>, if such a key is present.
            </summary>
            <param name="key">The key to remove from the style</param>
            <returns></returns>
        </member>
        <member name="M:HtmlBuilders.HtmlTag.HasClass(System.String)">
            <summary>
              Returns true if this <see cref="T:HtmlBuilders.HtmlTag"/> has the <paramref name="class"/> or false otherwise
            </summary>
            <param name="class">The class</param>
            <returns>True if this <see cref="T:HtmlBuilders.HtmlTag"/> has the <paramref name="class"/> or false otherwise</returns>
        </member>
        <member name="M:HtmlBuilders.HtmlTag.Class(System.String)">
            <summary>
              Adds a class to this tag.
            </summary>
            <param name="class">The class(es) to add</param>
            <returns>This <see cref="T:HtmlBuilders.HtmlTag"/></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:HtmlBuilders.HtmlTag.RemoveClass(System.String)" -->
        <member name="M:HtmlBuilders.HtmlTag.Merge``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
              Adds new attributes or optionally replaces existing attributes in the tag.
            </summary>
            <param name="attributes">The collection of attributes to add or replace.</param>
            <typeparam name="TKey">The type of the key object.</typeparam>
            <typeparam name="TValue">The type of the value object.</typeparam>
        </member>
        <member name="M:HtmlBuilders.HtmlTag.Merge``2(System.Collections.Generic.IDictionary{``0,``1},System.Boolean)">
            <summary>
              Adds new attributes or optionally replaces existing attributes in the tag.
            </summary>
            <param name="attributes">The collection of attributes to add or replace.</param>
            <param name="replaceExisting">
              For each attribute in <paramref name="attributes" />, true to replace the attribute if an
              attribute already exists that has the same key, or false to leave the original attribute unchanged.
            </param>
            <typeparam name="TKey">The type of the key object.</typeparam>
            <typeparam name="TValue">The type of the value object.</typeparam>
        </member>
        <member name="M:HtmlBuilders.HtmlTag.Merge(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
              Adds new attributes or optionally replaces existing attributes in the tag.
            </summary>
            <param name="attributes">The collection of attributes to add or replace.</param>
        </member>
        <member name="M:HtmlBuilders.HtmlTag.Merge(System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
              Adds new attributes or optionally replaces existing attributes in the tag.
            </summary>
            <param name="attributes">The collection of attributes to add or replace.</param>
            <param name="replaceExisting">
              For each attribute in <paramref name="attributes" />, true to replace the attribute if an
              attribute already exists that has the same key, or false to leave the original attribute unchanged.
            </param>
        </member>
        <member name="M:HtmlBuilders.HtmlTag.Merge(System.Object)">
            <summary>
              Adds new attributes or optionally replaces existing attributes in the tag.
            </summary>
            <param name="attributes">The collection of attributes to add or replace.</param>
        </member>
        <member name="M:HtmlBuilders.HtmlTag.Merge(System.Object,System.Boolean)">
            <summary>
              Adds new attributes or optionally replaces existing attributes in the tag.
            </summary>
            <param name="attributes">The collection of attributes to add or replace.</param>
            <param name="replaceExisting">
              For each attribute in <paramref name="attributes" />, true to replace the attribute if an
              attribute already exists that has the same key, or false to leave the original attribute unchanged.
            </param>
        </member>
        <member name="M:HtmlBuilders.HtmlTag.Render(System.Web.Mvc.TagRenderMode)">
            <summary>
              Sets the <see cref="T:System.Web.Mvc.TagRenderMode"/> that will be used when rendering this <see cref="T:HtmlBuilders.HtmlTag"/>.
              This is a convenient way to build up an <see cref="T:HtmlBuilders.HtmlTag"/> tree, configure the <see cref="T:System.Web.Mvc.TagRenderMode"/> for
              each node in the tree,
              and then render it entirely in one go.
            </summary>
            <param name="tagRenderMode">The tag render mode</param>
            <returns>This <see cref="T:HtmlBuilders.HtmlTag"/></returns>
        </member>
        <member name="M:HtmlBuilders.HtmlTag.ToHtml(System.Nullable{System.Web.Mvc.TagRenderMode})">
            <summary>
              Renders and returns the HTML tag by using the specified render mode.
            </summary>
            <param name="tagRenderMode">
              The render mode. If this parameter is not specified, the <see cref="T:System.Web.Mvc.TagRenderMode"/> that was specified with the
              <see cref="M:HtmlBuilders.HtmlTag.Render(System.Web.Mvc.TagRenderMode)"/> method will be used.
              If the <see cref="M:HtmlBuilders.HtmlTag.Render(System.Web.Mvc.TagRenderMode)"/> method was never called for this <see cref="T:HtmlBuilders.HtmlTag"/>, the
              <see cref="T:System.Web.Mvc.TagRenderMode"/> will default to <see cref="F:System.Web.Mvc.TagRenderMode.Normal"/>
              <br/><strong>IMPORTANT: </strong> When using <see cref="F:System.Web.Mvc.TagRenderMode.StartTag"/> or
              <see cref="F:System.Web.Mvc.TagRenderMode.EndTag"/>,
              the <see cref="P:HtmlBuilders.HtmlTag.Contents"/> of this <see cref="T:HtmlBuilders.HtmlTag"/> will not be rendered.
              This is because when you have more than 1 content element, it does not make sense to only render the start or end
              tags. Since the API exposes the
              <see cref="P:HtmlBuilders.HtmlTag.Contents"/> and <see cref="P:HtmlBuilders.HtmlTag.Children"/> separately, the responsibility is then with the developer to
              render the HTML as he or she wishes.
              However, when using <see cref="F:System.Web.Mvc.TagRenderMode.Normal"/> (or passing no parameters, since
              <see cref="F:System.Web.Mvc.TagRenderMode.Normal"/> is the default value),
              the <see cref="P:HtmlBuilders.HtmlTag.Contents"/> <strong> will</strong> be taken into account since there can't be any confusion as to
              what the expected HTML output would be.
              You can specify <see cref="T:System.Web.Mvc.TagRenderMode"/> for this <see cref="T:HtmlBuilders.HtmlTag"/> (or any of its <see cref="P:HtmlBuilders.HtmlTag.Children"/> )
              by using the <see cref="M:HtmlBuilders.HtmlTag.Render(System.Web.Mvc.TagRenderMode)"/> method.
            </param>
            <returns>The rendered HTML tag by using the specified render mode</returns>
            <exception cref="T:System.InvalidOperationException">
              When <see cref="F:System.Web.Mvc.TagRenderMode.SelfClosing"/> is used but the
              <see cref="T:HtmlBuilders.HtmlTag"/> is not empty. (The <see cref="P:HtmlBuilders.HtmlTag.Contents"/> are not empty)
            </exception>
        </member>
        <member name="M:HtmlBuilders.HtmlTag.Parse(System.Web.IHtmlString,System.Boolean)">
            <summary>
              Parses an <see cref="T:HtmlBuilders.HtmlTag"/> from the given <paramref name="html"/>
            </summary>
            <param name="html">The html</param>
            <param name="validateSyntax">A value indicating whether the html should be checked for syntax errors.</param>
            <returns>A new <see cref="T:HtmlBuilders.HtmlTag"/> that is an object representation of the <paramref name="html"/></returns>
            <exception cref="T:System.InvalidOperationException">
              If <paramref name="validateSyntax"/> is true and syntax errors are
              encountered in the <paramref name="html"/>
            </exception>
        </member>
        <member name="M:HtmlBuilders.HtmlTag.Parse(System.String,System.Boolean)">
            <summary>
              Parses an <see cref="T:HtmlBuilders.HtmlTag"/> from the given <paramref name="html"/>
            </summary>
            <param name="html">The html</param>
            <param name="validateSyntax">A value indicating whether the html should be checked for syntax errors.</param>
            <returns>A new <see cref="T:HtmlBuilders.HtmlTag"/> that is an object representation of the <paramref name="html"/></returns>
            <exception cref="T:System.InvalidOperationException">
              If <paramref name="validateSyntax"/> is true and syntax errors are
              encountered in the <paramref name="html"/>
            </exception>
        </member>
        <member name="M:HtmlBuilders.HtmlTag.Parse(System.IO.TextReader,System.Boolean)">
            <summary>
              Parses an <see cref="T:HtmlBuilders.HtmlTag"/> from the given <paramref name="textReader"/>
            </summary>
            <param name="textReader">The text reader</param>
            <param name="validateSyntax">A value indicating whether the html should be checked for syntax errors.</param>
            <returns>A new <see cref="T:HtmlBuilders.HtmlTag"/> that is an object representation of the <paramref name="textReader"/></returns>
            <exception cref="T:System.InvalidOperationException">
              If <paramref name="validateSyntax"/> is true and syntax errors are
              encountered in the <paramref name="textReader"/>
            </exception>
        </member>
        <member name="M:HtmlBuilders.HtmlTag.Parse(HtmlAgilityPack.HtmlDocument,System.Boolean)">
            <summary>
              Parses an <see cref="T:HtmlBuilders.HtmlTag"/> from the given <paramref name="htmlDocument"/>
            </summary>
            <param name="htmlDocument">The html document containing the html</param>
            <param name="validateSyntax">A value indicating whether the html should be checked for syntax errors.</param>
            <returns>
              Multiple <see cref="T:HtmlBuilders.HtmlTag"/>s that is an object representation of the <paramref name="htmlDocument"/>
            </returns>
            <exception cref="T:System.InvalidOperationException">
              If <paramref name="validateSyntax"/> is true and syntax errors are
              encountered in the <paramref name="htmlDocument"/>
            </exception>
        </member>
        <member name="M:HtmlBuilders.HtmlTag.ParseAll(System.Web.IHtmlString,System.Boolean)">
            <summary>
              Parses multiple <see cref="T:HtmlBuilders.HtmlTag"/>s from the given <paramref name="html"/>
            </summary>
            <param name="html">The html</param>
            <param name="validateSyntax">A value indicating whether the html should be checked for syntax errors.</param>
            <returns>A collection of <see cref="T:HtmlBuilders.HtmlTag"/></returns>
            <exception cref="T:System.InvalidOperationException">
              If <paramref name="validateSyntax"/> is true and syntax errors are
              encountered in the <paramref name="html"/>
            </exception>
        </member>
        <member name="M:HtmlBuilders.HtmlTag.ParseAll(System.String,System.Boolean)">
            <summary>
              Parses multiple <see cref="T:HtmlBuilders.HtmlTag"/>s from the given <paramref name="html"/>
            </summary>
            <param name="html">The html</param>
            <param name="validateSyntax">A value indicating whether the html should be checked for syntax errors.</param>
            <returns>A collection of <see cref="T:HtmlBuilders.HtmlTag"/></returns>
            <exception cref="T:System.InvalidOperationException">
              If <paramref name="validateSyntax"/> is true and syntax errors are
              encountered in the <paramref name="html"/>
            </exception>
        </member>
        <member name="M:HtmlBuilders.HtmlTag.ParseAll(System.IO.TextReader,System.Boolean)">
            <summary>
              Parses multiple <see cref="T:HtmlBuilders.HtmlTag"/>s from the given <paramref name="textReader"/>
            </summary>
            <param name="textReader">The text reader</param>
            <param name="validateSyntax">A value indicating whether the html should be checked for syntax errors.</param>
            <returns>A collection of <see cref="T:HtmlBuilders.HtmlTag"/></returns>
            <exception cref="T:System.InvalidOperationException">
              If <paramref name="validateSyntax"/> is true and syntax errors are
              encountered in the <paramref name="textReader"/>
            </exception>
        </member>
        <member name="M:HtmlBuilders.HtmlTag.ParseAll(HtmlAgilityPack.HtmlDocument,System.Boolean)">
            <summary>
              Parses multiple <see cref="T:HtmlBuilders.HtmlTag"/>s from the given <paramref name="htmlDocument"/>
            </summary>
            <param name="htmlDocument">The html document</param>
            <param name="validateSyntax">A value indicating whether the html should be checked for syntax errors.</param>
            <returns>A collection of <see cref="T:HtmlBuilders.HtmlTag"/></returns>
            <exception cref="T:System.InvalidOperationException">
              If <paramref name="validateSyntax"/> is true and syntax errors are
              encountered in the <paramref name="htmlDocument"/>
            </exception>
        </member>
        <member name="M:HtmlBuilders.HtmlTag.Equals(System.Object)">
            <summary>
              Returns true if this <see cref="T:HtmlBuilders.HtmlTag"/> is equivalent to <paramref name="other"/>. If any of the attributes or
              the children are different,
              this method will return false. It is important to note that the order in which styles and classes appear will not
              affect the equality in any way.
              However, the order of the <see cref="P:HtmlBuilders.HtmlTag.Contents"/> <strong>does</strong> matter.
              As a rule of thumb, if one <see cref="T:HtmlBuilders.HtmlTag"/> would have the same display presentation and behavior in a browser
              as another <see cref="T:HtmlBuilders.HtmlTag"/>, they are considered equal.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:HtmlBuilders.HtmlTag.TagName">
            <summary>
              Gets the tag name
            </summary>
        </member>
        <member name="P:HtmlBuilders.HtmlTag.Children">
            <summary>
              Gets the children in the order that they were added.
              <br/><strong>WARNING</strong>: Text nodes (<see cref="T:HtmlBuilders.HtmlText"/>) do not count as children and will not be
              included in this property.
              See <see cref="P:HtmlBuilders.HtmlTag.Contents"/> if you want the text nodes to be included.
            </summary>
        </member>
        <member name="P:HtmlBuilders.HtmlTag.Contents">
            <summary>
              Gets or sets the contents.
              This property is very similar to the <see cref="P:System.Web.Mvc.TagBuilder.InnerHtml"/> property, save for the fact that instead of
              just a string
              this is now a collection of elements. This allows for more extensive manipulation and DOM traversal similar to what
              can be done with jQuery.
            </summary>
        </member>
        <member name="P:HtmlBuilders.HtmlTag.Parents">
            <summary>
              Gets the parents of this <see cref="T:HtmlBuilders.HtmlTag"/> in a 'from inside out' order.
            </summary>
        </member>
        <member name="P:HtmlBuilders.HtmlTag.Siblings">
            <summary>
              Gets the siblings of this <see cref="T:HtmlBuilders.HtmlTag"/>
            </summary>
        </member>
        <member name="P:HtmlBuilders.HtmlTag.Parent">
            <summary>
              Gets the (optional) parent of this <see cref="T:HtmlBuilders.HtmlTag"/>.
            </summary>
        </member>
        <member name="P:HtmlBuilders.HtmlTag.Styles">
            <summary>
              Gets or sets the 'style' attribute of this <see cref="T:HtmlBuilders.HtmlTag"/>.
              Note that this is a utility method that parses the 'style' attribute from a string into a
              <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/>
            </summary>
        </member>
        <member name="P:HtmlBuilders.HtmlTag.Classes">
            <summary>
              Gets or sets the classes of this <see cref="T:HtmlBuilders.HtmlTag"/>
              This is a utility method to easily manipulate the 'class' attribute
            </summary>
        </member>
        <member name="T:HtmlBuilders.HtmlTags">
            <summary>
              Provides convenience properties to create instances of <see cref="T:HtmlBuilders.HtmlTag"/>
            </summary>
        </member>
        <member name="T:HtmlBuilders.HtmlText">
            <summary>
              Represents a text node that has an optional parent and some text
            </summary>
        </member>
        <member name="M:HtmlBuilders.HtmlText.#ctor(System.String)">
            <summary>
              Initializes a new instance of <see cref="T:HtmlBuilders.HtmlText"/>
            </summary>
            <param name="text">The text</param>
        </member>
        <member name="P:HtmlBuilders.HtmlText.Text">
            <summary>
              The inner text
            </summary>
        </member>
        <member name="M:HtmlBuilders.StyleExtensions.Width(HtmlBuilders.HtmlTag,System.String,System.Boolean)">
            <summary>
              Sets the width style. This is a shorthand for calling the <see cref="M:HtmlBuilders.HtmlTag.Style(System.String,System.String,System.Boolean)"/> method with the 'width' key
            </summary>
            <param name="htmlTag">This <see cref="T:HtmlBuilders.HtmlTag"/></param>
            <param name="width">The width. This can be any valid css value for 'width'</param>
            <param name="replaceExisting">A value indicating whether the existing width, if any, should be overriden or not</param>
            <returns>This <see cref="T:HtmlBuilders.HtmlTag"/></returns>
        </member>
        <member name="M:HtmlBuilders.StyleExtensions.Height(HtmlBuilders.HtmlTag,System.String,System.Boolean)">
            <summary>
              Sets the height style. This is a shorthand for calling the <see cref="M:HtmlBuilders.HtmlTag.Style(System.String,System.String,System.Boolean)"/> method with the 'height' key
            </summary>
            <param name="htmlTag">This <see cref="T:HtmlBuilders.HtmlTag"/></param>
            <param name="height">The height. This can be any valid css value for 'height'</param>
            <param name="replaceExisting">A value indicating whether the existing height, if any, should be overriden or not</param>
            <returns>This <see cref="T:HtmlBuilders.HtmlTag"/></returns>
        </member>
        <member name="M:HtmlBuilders.StyleExtensions.Margin(HtmlBuilders.HtmlTag,System.String,System.Boolean)">
            <summary>
              Sets the margin style. This is a shorthand for calling the <see cref="M:HtmlBuilders.HtmlTag.Style(System.String,System.String,System.Boolean)"/> method with the 'margin' key
            </summary>
            <param name="htmlTag">This <see cref="T:HtmlBuilders.HtmlTag"/></param>
            <param name="margin">The margin. This can be any valid css value for 'margin'</param>
            <param name="replaceExisting">A value indicating whether the existing margin, if any, should be overriden or not</param>
            <returns>This <see cref="T:HtmlBuilders.HtmlTag"/></returns>
        </member>
        <member name="M:HtmlBuilders.StyleExtensions.Padding(HtmlBuilders.HtmlTag,System.String,System.Boolean)">
            <summary>
              Sets the padding style. This is a shorthand for calling the <see cref="M:HtmlBuilders.HtmlTag.Style(System.String,System.String,System.Boolean)"/> method with the 'padding'
              key
            </summary>
            <param name="htmlTag">This <see cref="T:HtmlBuilders.HtmlTag"/></param>
            <param name="padding">The padding. This can be any valid css value for 'padding'</param>
            <param name="replaceExisting">A value indicating whether the existing padding, if any, should be overriden or not</param>
            <returns>This <see cref="T:HtmlBuilders.HtmlTag"/></returns>
        </member>
        <member name="M:HtmlBuilders.StyleExtensions.Color(HtmlBuilders.HtmlTag,System.String,System.Boolean)">
            <summary>
              Sets the color style. This is a shorthand for calling the <see cref="M:HtmlBuilders.HtmlTag.Style(System.String,System.String,System.Boolean)"/> method with the 'color' key
            </summary>
            <param name="htmlTag">This <see cref="T:HtmlBuilders.HtmlTag"/></param>
            <param name="color">The color. This can be any valid css value for 'color'</param>
            <param name="replaceExisting">A value indicating whether the existing color, if any, should be overriden or not</param>
            <returns>This <see cref="T:HtmlBuilders.HtmlTag"/></returns>
        </member>
        <member name="M:HtmlBuilders.StyleExtensions.TextAlign(HtmlBuilders.HtmlTag,System.String,System.Boolean)">
            <summary>
              Sets the text-align style. This is a shorthand for calling the <see cref="M:HtmlBuilders.HtmlTag.Style(System.String,System.String,System.Boolean)"/> method with the
              'text-align' key
            </summary>
            <param name="htmlTag">This <see cref="T:HtmlBuilders.HtmlTag"/></param>
            <param name="textAlign">The text alignment. This can be any valid css value for 'text-align'</param>
            <param name="replaceExisting">A value indicating whether the existing text-align, if any, should be overriden or not</param>
            <returns>This <see cref="T:HtmlBuilders.HtmlTag"/></returns>
        </member>
        <member name="M:HtmlBuilders.StyleExtensions.Border(HtmlBuilders.HtmlTag,System.String,System.Boolean)">
            <summary>
              Sets the border style. This is a shorthand for calling the <see cref="M:HtmlBuilders.HtmlTag.Style(System.String,System.String,System.Boolean)"/> method with the 'border' key
            </summary>
            <param name="htmlTag">This <see cref="T:HtmlBuilders.HtmlTag"/></param>
            <param name="border">The border. This can be any valid css value for 'border'</param>
            <param name="replaceExisting">A value indicating whether the existing border, if any, should be overriden or not</param>
            <returns>This <see cref="T:HtmlBuilders.HtmlTag"/></returns>
        </member>
    </members>
</doc>
